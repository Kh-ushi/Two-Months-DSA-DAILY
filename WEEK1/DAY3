// 147. Insertion Sort List


class Solution {
    public ListNode insertionSortList(ListNode head) {

        ListNode dummy=new ListNode(0);
        ListNode curr=head;

        while(curr!=null){
            ListNode prev=dummy;

            while(prev.next!=null && prev.next.val<curr.val){
                prev=prev.next;
            }
            ListNode next=curr.next;
            curr.next=prev.next;
            prev.next=curr;
            curr=next;
        }

        
        return dummy.next;
        
    }

}

// 148. Sort List


class Solution {

    public ListNode findMid(ListNode head) {
        ListNode slow = head;
        ListNode fast = head.next;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    public ListNode merge(ListNode left, ListNode right) {
        ListNode dummy = new ListNode(-1);
        ListNode temp = dummy;

        while (left != null && right != null) {
            if (left.val < right.val) {
                temp.next = left;
                left = left.next;
            } else {
                temp.next = right;
                right = right.next;
            }
            temp = temp.next;
        }

        while (left != null) {
            temp.next = left;
            left = left.next;
            temp = temp.next;
        }

        while (right != null) {
            temp.next = right;
            right = right.next;
            temp = temp.next;
        }

        return dummy.next;
    }

    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode mid = findMid(head);
        ListNode right = mid.next;
        mid.next = null;

        ListNode leftHead = sortList(head);
        ListNode rightHead = sortList(right);

        return merge(leftHead, rightHead);
    }
}

// 