// 1031. Maximum Sum of Two Non-Overlapping Subarrays

class Solution {
    
    public int solve(int nums[],int firstLen,int secondLen){
        int n=nums.length;
        int prefix[]=new int[n+1];

        for(int i=1;i<=n;i++){
            prefix[i]=prefix[i-1]+nums[i-1];
        } 

        int maxFirst=0;
        int maxSum=0;

        for(int i=firstLen+secondLen;i<=n;i++){

            maxFirst=Math.max(maxFirst,prefix[i-secondLen]-prefix[i-secondLen-firstLen]);
            maxSum=Math.max(maxSum,maxFirst+prefix[i]-prefix[i-secondLen]);
        }
        return maxSum;
    }

    public int maxSumTwoNoOverlap(int[] nums, int firstLen, int secondLen) {
        
        int sum1=solve(nums,firstLen,secondLen);
        int sum2=solve(nums,secondLen,firstLen);
        
        return Math.max(sum1,sum2);
    }
}

// Gray Code
class Solution {
    public List<Integer> grayCode(int n) {

        List<Integer>result=new ArrayList<>();
        int totalNumbers=1<<n;

        for(int i=0;i<totalNumbers;i++){
            result.add(i^(i>>1));
        }
        return result;
    }
}
