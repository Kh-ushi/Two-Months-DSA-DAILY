// 978. Longest Turbulent Subarray

class Solution {
    public int maxTurbulenceSize(int[] arr) {

        if(arr.length < 2){
            return arr.length;
        }
        
        int comparison[] = new int[arr.length - 1];
        for(int i = 0; i < arr.length - 1; i++){
            if(arr[i] > arr[i + 1]){
                comparison[i] = 1;
            }
            else if(arr[i] < arr[i + 1]){
                comparison[i] = -1;
            }
            else{
                comparison[i] = 0;
            }
        }

        if(comparison.length < 2){
            if(comparison.length == 1 && comparison[0] == 0){
                return 1;
            }
            return comparison.length + 1;
        }

        // MAIN LOGIC
        int left = 0;
        int right = 0;
        int maxLength = 1;

        while(right < comparison.length){
          
            if(comparison[right] == 0){
                left = right + 1;
            }
            else if(right > 0 && comparison[right] == comparison[right - 1]){
                left = right;
            }
            right++;

            maxLength = Math.max(maxLength, right - left + 1);
        }

        return maxLength;
    }
}

// 1004. Max Consecutive Ones III

class Solution {
    public int longestOnes(int[] nums, int k) {
        int left=0;
        int right=0;
        int track=0;
        int maxLength=0;

        while(right<nums.length){

            if(nums[right]==0){
                while(left<=right && track>=k){
                    if(nums[left]==0){
                        track--;
                    }
                    left++;
                }
                track++;
            }
            maxLength=Math.max(maxLength,right-left+1);
            right++;
        }

        return maxLength;
    }
}