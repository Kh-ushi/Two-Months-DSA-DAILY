// 1782. Count Pairs Of Nodes
class Solution {
    public int[] countPairs(int n, int[][] edges, int[] queries) {

        int degree[]=new int[n+1];
        Map<Integer,Integer>edgeCount=new HashMap<>();

        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            degree[u]++;
            degree[v]++;

            int min=Math.min(u,v);
            int max=Math.max(u,v);
            int hash=min*(n+1)+max;
            edgeCount.put(hash,edgeCount.getOrDefault(hash,0)+1);
        }
        
        int sortedDegree[]=Arrays.copyOfRange(degree,1,n+1);
        Arrays.sort(sortedDegree);

        int result[]=new int[queries.length];

        //MAIN LOGIC
        for(int i=0;i<queries.length;i++){

            int q=queries[i];
            int count=0;
             int left=0;
             int right=n-1;

             while(left<right){
                if(sortedDegree[left]+sortedDegree[right]>q){
                 count+=right-left;
                 right--;
                }
                else{
                    left++;
                }
             }


             for(int hash:edgeCount.keySet()){
                int u=hash/(n+1);
                int v=hash%(n+1);

                if(degree[u]+degree[v]>q && degree[u]+degree[v]-edgeCount.get(hash) <=q){
                    count--;
                }
             }

             result[i]=count;

        }




        return result;


    }
}

// 1574. Shortest Subarray to be Removed to Make Array Sorted

class Solution {
    public int findLengthOfShortestSubarray(int[] arr) {
        int begin=0;
        int end=arr.length-1;

        for(;begin<arr.length-1;begin++){
            if(arr[begin]>arr[begin+1]){
                break;
            }
        }

        if(begin==arr.length-1){
            return 0;
        }
        
        for(;end>=0;end--){
            if(arr[end]<arr[end-1]){
                break;
            }
        }

        int minLength=Math.min(arr.length-1-begin,end);


        for(;begin>=0;begin--){
            for(int i=end;i<arr.length;i++){
              if(arr[begin]>arr[i]){
                continue;
              }
              minLength=Math.min(minLength,i-1-begin);

            }
        }

        return minLength;


    }
}

// 1793. Maximum Score of a Good Subarray
class Solution {

    public void getnsl(int[] nsl, int[] nums) {
        Stack<Integer> s = new Stack<>();
        for (int i = 0; i < nums.length; i++) {
            while (!s.isEmpty() && nums[s.peek()] >= nums[i]) {
                s.pop();
            }
            nsl[i] = s.isEmpty() ? -1 : s.peek();
            s.push(i);
        }
    }

    public void getnsr(int[] nsr, int[] nums) {
        Stack<Integer> s = new Stack<>();
        for (int i = nums.length - 1; i >= 0; i--) {
            while (!s.isEmpty() && nums[s.peek()] >= nums[i]) {
                s.pop();
            }
            nsr[i] = s.isEmpty() ? nums.length : s.peek();
            s.push(i);
        }
    }

    public int maximumScore(int[] nums, int k) {
        int n = nums.length;
        int[] nsl = new int[n];
        int[] nsr = new int[n];
        getnsl(nsl, nums);
        getnsr(nsr, nums);

        int maxScore = 0;

        for (int i = 0; i < n; i++) {
            if (nsl[i] < k && nsr[i] > k) {
                int left = nsl[i] + 1;
                int right = nsr[i] - 1;
                int score = (right - left + 1) * nums[i];
                maxScore = Math.max(maxScore, score);
            }
        }

        return maxScore;
    }
}

// 904. Fruit Into Baskets

class Solution {
    public int totalFruit(int[] fruits) {

        HashMap<Integer,Integer>map=new HashMap<>();
        int left=0;
        int maxFruits=0;

        for(int right=0;right<fruits.length;right++){
            map.put(fruits[right],map.getOrDefault(fruits[right],0)+1);

            while(map.size()>2){
                map.put(fruits[left],map.get(fruits[left])-1);
                if(map.get(fruits[left])==0){
                    map.remove(fruits[left]);
                }
                left++;
            }

            maxFruits=Math.max(maxFruits,right-left+1);
        }

        return maxFruits;
    }
}

// 930. Binary Subarrays With Sum

class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        int count = 0;
        int sum = 0;

       

        HashMap<Integer, Integer> psum = new HashMap<>();
         psum.put(0,1);
         
        for (int num : nums) {
            sum += num;
            if(psum.containsKey(sum-goal)){
                count+=psum.get(sum-goal);
            }
            psum.put(sum,psum.getOrDefault(sum,0)+1);
        }

        return count;

    }
}