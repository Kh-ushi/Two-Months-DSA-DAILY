// 77. Combinations


class Solution {

    public void solve(int n, int k, int idx, List<List<Integer>> ans, List<Integer> list) {
        
        if (list.size() == k) {
            ans.add(new ArrayList<>(list));
            return;
        }

       
        for (int i = idx; i <= n; i++) {
            list.add(i);
            solve(n, k, i + 1, ans, list);
            list.remove(list.size() - 1);
        }
    }

    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> ans = new ArrayList<>();
        if (k > n) { 
            return ans;
        }
        solve(n, k, 1, ans, new ArrayList<>());
        return ans;
    }
}


//93. Restore IP Addresses
 
class Solution {

    public boolean isValid(String part) {
        if(part==""){
            return false;
        }
        if (part.length() > 3 || (part.length() > 1 && part.charAt(0) == '0')) {
            return false;
        }
        int val = Integer.parseInt(part);
        return val >= 0 && val <= 255;
    }

    public void solve(String s, String add, List<String> ans, int idx, int dots) {
        if (dots == 3) {
            String part = s.substring(idx);
            if (isValid(part)) {
                ans.add(add + part);
            }
            return;
        }

        for (int i = 1; i <= 3 && idx + i <= s.length(); i++) {
            String part = s.substring(idx, idx + i);
            if (isValid(part)) {
                solve(s, add + part + ".", ans, idx + i, dots + 1);
            }
        }
    }

    public List<String> restoreIpAddresses(String s) {
        List<String> ans = new ArrayList<>();
        if (s.length() < 4 || s.length() > 12) {
            return ans;
        }
        solve(s, "", ans, 0, 0);
        return ans;
    }
}

// 216. Combination Sum III

class Solution {
   
    public void solve(int k, int n, List<Integer> nums, List<List<Integer>> ans, int idx, int sum) {
        if (nums.size() == k) {
            if (sum == n) {
                ans.add(new ArrayList<>(nums));
            }
            return;
        }
        
        for (int i = idx; i <= 9; i++) {
            nums.add(i);
            solve(k, n, nums, ans, i + 1, sum + i);
            nums.remove(nums.size() - 1);
        }
    }

    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> nums = new ArrayList<>();
        solve(k, n, nums, ans, 1, 0); 
        return ans;
    }
}

// 2044. Count Number of Maximum Bitwise-OR Subsets

class Solution {
    int count;

    public void solve(int nums[], int max, int sum, int idx) {
        if (idx >= nums.length) {
            if (sum == max) {
                count++;
            }
            return;
        }

        // Include current element
        solve(nums, max, sum | nums[idx], idx + 1);

        // Exclude current element
        solve(nums, max, sum, idx + 1);
    }

    public int countMaxOrSubsets(int[] nums) {
        int max = nums[0];
        for (int i = 1; i < nums.length; i++) {
            max = max | nums[i];
        }

        count = 0;
        solve(nums, max, 0, 0);

        return count;
    }
}

// 1079. Letter Tile Possibilities

class Solution {
    
    public void solve(String tiles,StringBuilder path,HashSet<String>set,boolean used[]){

        if(path.length()>0){
            set.add(path.toString());
        }


        for(int i=0;i<tiles.length();i++){
         
           if(used[i] || (i>0 && tiles.charAt(i)==tiles.charAt(i-1) && !used[i-1])){
            continue;
           }

           used[i]=true;
           path.append(tiles.charAt(i));
           solve(tiles,path,set,used);
           used[i]=false;
           path.deleteCharAt(path.length()-1);
            
        }

    }

    public int numTilePossibilities(String tiles) {

       
        char[] chars = tiles.toCharArray();
        Arrays.sort(chars);
        HashSet<String> set = new HashSet<>();
        boolean[] used = new boolean[tiles.length()];
        solve(new String(chars), new StringBuilder(""), set, used);
        return set.size();

        
    }
}
// 2375. Construct Smallest Number From DI String

class Solution {
    public String smallestNumber(String pattern) {
        int n=pattern.length();
        Stack<Integer>s=new Stack<>();
        StringBuilder sb=new StringBuilder();

        for(int i=1;i<=n+1;i++){
            s.push(i);

            if(i==n+1 || pattern.charAt(i - 1) == 'I'){

                while(!s.isEmpty()){
                    sb.append(s.pop());
                }
            }
        }

        return sb.toString();
    }
}

// 1415. The k-th Lexicographical String of All Happy Strings of Length n

class Solution {
    int count;

    public String solve(String current, int n, String[] arr) {
        if (current.length() == n) {
            count--;
            return count == 0 ? current : "";
        }

        for (String ch : arr) {
            if (current.length() > 0 && ch.charAt(0) == current.charAt(current.length() - 1)) {
                continue;
            }

            String result = solve(current + ch, n, arr);

            if (!result.equals("")) {
                return result;
            }
        }

        return "";
    }

    public String getHappyString(int n, int k) {
        count = k;
        String[] arr = { "a", "b", "c" };
        return solve("", n, arr);
    }
}

// 1980. Find Unique Binary String

class Solution {
   
    public String getBinaryStrings(String str,int n,HashSet<String>set){
 
       if(n==0){
         if(set.contains(str)){
             return "";
         }
         return str;
       }
        
        String first= getBinaryStrings(str+"0",n-1,set);
        if(!first.equals("")){
         return first;
        }
        String second=getBinaryStrings(str+"1",n-1,set);
        if(!second.equals("")){
           return second;
        }
 
        return "";
    }
 
     public String findDifferentBinaryString(String[] nums) {
 
         HashSet<String>set=new HashSet<>();
         for(int i=0;i<nums.length;i++){
             set.add(nums[i]);
         }
 
 
         return getBinaryStrings("",nums.length,set);
         
     }
 }

//  52. N-Queens II

class Solution {

    int count;

    public boolean isSafe(char board[][], int row, int col) {
        for (int i = row - 1; i >= 0; i--) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }

        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        for (int i = row - 1, j = col + 1; i >= 0 && j < board.length; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }

    public void NQueens(char board[][], int row) {
        if (row == board.length) {
            count++;
            return;
        }

        for (int col = 0; col < board[0].length; col++) {
            if (isSafe(board, row, col)) {
                board[row][col] = 'Q';
                NQueens(board, row + 1);
                board[row][col] = '.';
            }
        }
    }

    public int totalNQueens(int n) {
        char board[][] = new char[n][n];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                board[i][j] = '.';
            }
        }

        count = 0;
        NQueens(board, 0);
        return count;
    }
}

// 